<?php
namespace frontend\controllers;

use backend\modules\orders\models\LiqpayLogs;
use backend\modules\orders\models\Orders;
use yii\widgets\ActiveForm;
use yii\web\Response;
use Yii;
use yii\data\ActiveDataProvider;
use yii\db\Expression;
use yii\helpers\Html;
use yii\web\NotFoundHttpException;
use backend\modules\products\models\Products;
use backend\modules\categories\models\Category;
use backend\modules\clients\models\Client;
use backend\modules\orders\models\OrdersPayments;
use yii\helpers\Url;
use frontend\helpers\Transliteration;
use common\models\Config;
use frontend\models\LiqPay;

class CheckoutController extends BaseController
{

    public $payment;


    public function beforeAction($action)
    {
        $this->payment=new OrdersPayments();

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {

        $this->layout = "checkout-loyout";
        $request = Yii::$app->request;
        $session = Yii::$app->session;

        if($request->isAjax){
            $id = $request->post('id');
            if(!$session->isActive){$session->open();}
            $cart = $session->get('cart');
            if(!empty($cart[$id])){
                unset($cart[$id]);
                $session->set('cart', $cart);
            }

        }
        $orderForm = new Orders(['scenario' => Orders::FRONTEND_ADD_SCENARIO]);
        if (Yii::$app->request->isAjax && $orderForm->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($orderForm);
        }
        if($orderForm->load(\Yii::$app->request->post()) && $orderForm->validate()){
//           echo "<pre>"; var_dump(Yii::$app->request->post());exit;
            if($orderForm->save()) {
                $session = Yii::$app->session;
                if(!$session->isActive){$session->open();}
                $session->remove('cart');
                if(Yii::$app->request->post("OrdersPayments")['payment_type'] == 0) {
                    $public_key=Config::getParameter('liqpay_public');
                    $private_key=Config::getParameter('liqpay_private');

                    $data = array(
                        'version' =>3,
                        'public_key'=>$public_key,
                        'private_key'=>$private_key,
                        'action'=>'pay',
                        'amount'=>$orderForm->amount,
                        'currency'=>'UAH',
                        'description'    => 'Оплата заказа #'.$orderForm->id,
                        'order_id'=>base64_encode($orderForm->id),
                        'result_url'     => Url::to(['site/index'],true),
                        'sandbox'        => Config::getParameter('liqpay_sandbox')?1:0,
                        'server_url'     => Url::to(['checkout/liqpay-result'],true),
                    );
                    $data = base64_encode( json_encode($data) );
                    $sign = base64_encode( sha1(
                        $private_key .
                        $data .
                        $private_key
                        , 1 ));



                    return $this->redirect("https://www.liqpay.ua/api/3/checkout?data=".$data."&signature=".$sign);

                }else{
                    \Yii::$app->session->setFlash('success', \Yii::t('app', 'Спасибо, мы свяжемся с вами в ближайшее время'));
                    return $this->redirect(Url::to(['/site/index']));
                }

            } else {
                \Yii::$app->session->setFlash('error',  \Yii::t('app', \Yii::t('app', 'Что-то не так, пожалуйста, заполните все поля и отправьте еще раз')));
            }
        }

        $user = Client::findOne(Yii::$app->user->id);



        $query = Products::find();
        $where = array(
            'status' => 1
        );
        $query = $query->where($where);
        $session = Yii::$app->session;
        if(!$session->isActive){$session->open();}
        $cart = $session->get('cart');
        if(is_array($cart)){$cart = array_keys($cart);}
        if(!empty($cart)){
            $query->andWhere(['in', 'id', $cart]);
        }else{
            $query->andWhere(['in', 'id', -1]);
        }
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => false
        ]);

        if($dataProvider->getTotalCount() == 0){
            return $this->redirect(['site/cart']);
        }

        return $this->render('index', ['dataProvider' => $dataProvider, 'orderForm' => $orderForm, 'user' => $user]);
    }

    public function actionGetOffice(){
        $request = Yii::$app->request;
        if($request->isAjax){
            $city_id = $request->post("city_id");
            if(!empty($city_id)){
                $NovaPoshta =  new \backend\modules\orders\models\NovaPoshta();
                $response = $NovaPoshta->getAllWarehouses($city_id);
                $offices = array();
                foreach($response as $key => $value){
                    $offices[] = array(
                        'id' => $key,
                        'title' => $value

                    );
                }
//                echo "<pre>"; var_dump($offices);
                return json_encode($offices);
            }


        }
    }


    public function actionLiqpayResult(){
        $this->enableCsrfValidation = false;
        $data=Yii::$app->request->post('data');
        $signature=Yii::$app->request->post('signature');

        $public_key=Config::getParameter('liqpay_public');
        $private_key=Config::getParameter('liqpay_private');
        $log = new LiqpayLogs();



        $sign = base64_encode( sha1(
            $private_key .
            $data .
            $private_key
            , 1 ));

        if($sign!=$signature){
            exit();
        }

        $data=base64_decode($data);

        $data=json_decode($data);

        $order_id=base64_decode($data->order_id);

        $order=Orders::findOne($order_id);

        $liqpay = new LiqPay($public_key, $private_key);
        $res = $liqpay->api("payment/status", array(
            'version'       => '3',
            'order_id'      => $data->order_id
        ));
        $log->note = json_encode($res);
        $log->transaction_id = $res->transaction_id;
        $log->status = $res->status;
        $log->order_id = $order_id;
        $log->liqpay_order_id = $res->liqpay_order_id;
        $log->paytype = $res->paytype;
        $log->acq_id = $res->acq_id;
        $log->result = $res->result;
        $log->create_date = date('Y-m-d H:i:s', (int)substr((string)$res->create_date, 0, 10));
        $log->save();
        if($res->result == "ok"){
            if ($res->status == 'success' || $res->status == 'sandbox') {
                $order->payment->transaction_id=$res->liqpay_order_id;
                $order->payment->time=date('Y-m-d H:i:s', (int)substr((string)$res->create_date, 0, 10));
                $order->payment->method=$res->paytype;
                $order->payment->status=1;
                $order->payment->save();
            }else{
                $order->payment->transaction_id=$res->liqpay_order_id;
                $order->payment->time=date('Y-m-d H:i:s', (int)substr((string)$res->create_date, 0, 10));
                $order->payment->method=$res->paytype;
                $order->payment->save();
            }
        }



        Yii::$app->end();
    }

}
