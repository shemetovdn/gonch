<?php

namespace frontend\models;

use backend\modules\clients\models\Client;
use backend\modules\clients\models\ClientsForm;
use frontend\helpers\Transliteration;
use Yii;
use yii\base\Model;
use yii\helpers\ArrayHelper;
use backend\modules\products\models\Desire;


/**
 * LoginForm is the model behind the login form.
 */
class LoginForm extends Model
{
    public $username;
    public $password;
    public $rememberMe = true;
    public $return;

    private $_user = false;


    public function init()
    {
        if(Yii::$app->user->id) $this->return=['profile/index'];
//        else $this->return=['site/index'];

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array the validation rules.
     */
    public function rules()
    {
        return [
            // username and password are both required
            ['password', 'required'],
            ['username', 'required', 'message'=>'Это обязательное поле'],
            // rememberMe must be a boolean value
//            ['rememberMe', 'boolean'],
            // password is validated by validatePassword()
            ['password', 'validatePassword'],

            ['return','safe']
        ];
    }

    /**
     * Validates the password.
     * This method serves as the inline validation for password.
     *
     * @param string $attribute the attribute currently being validated
     * @param array $params the additional name-value pairs given in the rule
     */
    public function validatePassword($attribute, $params)
    {
        if (!$this->hasErrors()) {
            $user = $this->getUser();

            if (!$user || !$user->validatePassword($this->password)) {
                $this->addError($attribute, 'Incorrect username or password.');
            }
        }
    }

    /**
     * Logs in a user using the provided username and password.
     * @return boolean whether the user is logged in successfully
     */
    public function login()
    {
        if ($this->validate()) {
            return Yii::$app->user->login($this->getUser(), $this->rememberMe ? 3600*24*30 : 0);
        } else {
            return false;
        }
    }

    /**
     * Finds user by [[username]]
     *
     * @return Client|null
     */
    public function getUser()
    {
        if ($this->_user === false) {
            $this->_user = Client::findByUsername($this->username);

            /** added login by email**/
            if($this->_user === false ){
                $this->_user = Client::findByEmail($this->username);
            }
        }

        return $this->_user;
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge([
            'username'=>'Username / Email',
            'password'=>'Password',
            'rememberMe' => Yii::t('app', 'Запомнить меня'),
        ],parent::attributeLabels());
    }

    public static function GoogleLogin($serviceName)
    {

        /** @var $eauth \nodge\eauth\ServiceBase */
        $eauth = Yii::$app->get('eauth')->getIdentity($serviceName);
        $eauth->setRedirectUrl(Yii::$app->getUser()->getReturnUrl());
        $eauth->setCancelUrl(Yii::$app->getUrlManager()->createAbsoluteUrl('site/login'));

        try {
            if ($eauth->authenticate()) {
//                  var_dump($eauth->getIsAuthenticated(), $eauth->getAttributes()); exit;

                $identity = Client::findByEAuth($eauth);
                $service_id = $identity->id;
                $formModel = new ClientsForm();
                Yii::$app->getUser()->login($identity);
                $name = explode(" ", $identity->username);
                $identity->username = Transliteration::transliteration($name[1]).Transliteration::transliteration($name[0]);


                $loginFormModel = new LoginForm();
                $loginFormModel->username = $identity->username;
                $loginFormModel->password = $identity->id;
                $loginFormModel->rememberMe = true;
                $loginFormModel->login();
//                    echo "<pre>";var_dump($loginFormModel->login());exit;
                if(!$loginFormModel->login()){
                    $identity->password = $service_id;
                    $identity->data->first_name = $name[0];
                    $identity->data->last_name = $name[1];
                    $identity->data->service = $identity->profile["service"];
                    $identity->data->service_id = $identity->profile["id"];
                    $saved = $identity->save();

                    // special redirect with closing popup window
                    if($saved){
                        $loginFormModel = new LoginForm();
                        $loginFormModel->username = $identity->username;
                        $loginFormModel->password = $service_id;
                        $loginFormModel->rememberMe = true;

//        echo "<pre>";var_dump($identity->id);exit;
                        if($loginFormModel->login()){
                            $response = Desire::AddToWishlist();
                            if($response || Client::CheckReturn()){
                                $eauth->redirect(['profile/wishes']);
                            }
                            $eauth->redirect('profile/index');
                        }

                    }
                }else{
                    $response = Desire::AddToWishlist();
                    if($response || Client::CheckReturn()){
                        $eauth->redirect(['profile/wishes']);
                    }
                    $eauth->redirect('profile/index');
                }
            }
            else {
                // close popup window and redirect to cancelUrl
                $eauth->cancel();
            }
        }
        catch (\nodge\eauth\ErrorException $e) {
            // save error to show it later
            Yii::$app->getSession()->setFlash('error', 'EAuthException: '.$e->getMessage());

            // close popup window and redirect to cancelUrl
//              $eauth->cancel();
            $eauth->redirect($eauth->getCancelUrl());
        }
    }

    public static function FaceboockLogin($serviceName)
    {

        /** @var $eauth \nodge\eauth\ServiceBase */
        $eauth = Yii::$app->get('eauth')->getIdentity($serviceName);
        $eauth->setRedirectUrl(Yii::$app->getUser()->getReturnUrl());
        $eauth->setCancelUrl(Yii::$app->getUrlManager()->createAbsoluteUrl('site/login'));

        try {
            if ($eauth->authenticate()) {
//                  var_dump($eauth->getIsAuthenticated(), $eauth->getAttributes()); exit;

                $identity = Client::findByEAuth($eauth);
                $service_id = $identity->id;
                $formModel = new ClientsForm();
                Yii::$app->getUser()->login($identity);
                $name = explode(" ", $identity->username);
                $identity->username = Transliteration::transliteration($name[1]).Transliteration::transliteration($name[0]);


                $loginFormModel = new LoginForm();
                $loginFormModel->username = $identity->username;
                $loginFormModel->password = $identity->id;
                $loginFormModel->rememberMe = true;
                $loginFormModel->login();
//                    echo "<pre>";var_dump($loginFormModel->login());exit;
                if(!$loginFormModel->login()){
                    $identity->password = $service_id;
                    $identity->data->first_name = $name[0];
                    $identity->data->last_name = $name[1];
                    $identity->data->service = $identity->profile["service"];
                    $identity->data->service_id = $identity->profile["id"];
                    $saved = $identity->save();

                    // special redirect with closing popup window
                    if($saved){
                        $loginFormModel = new LoginForm();
                        $loginFormModel->username = $identity->username;
                        $loginFormModel->password = $service_id;
                        $loginFormModel->rememberMe = true;

//        echo "<pre>";var_dump($identity->id);exit;
                        if($loginFormModel->login()){
                            $response = Desire::AddToWishlist();
                            if($response || Client::CheckReturn()){
                                $eauth->redirect(['profile/wishes']);
                            }
                            $eauth->redirect('profile/index');
                        }

                    }
                }else{
                    $response = Desire::AddToWishlist();
                    if($response || Client::CheckReturn()){
                        $eauth->redirect(['profile/wishes']);
                    }
                    $eauth->redirect('profile/index');
                }
            }
            else {
                // close popup window and redirect to cancelUrl
                $eauth->cancel();
            }
        }
        catch (\nodge\eauth\ErrorException $e) {
            // save error to show it later
            Yii::$app->getSession()->setFlash('error', 'EAuthException: '.$e->getMessage());

            // close popup window and redirect to cancelUrl
//              $eauth->cancel();
            $eauth->redirect($eauth->getCancelUrl());
        }
    }
}
