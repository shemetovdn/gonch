<?php
namespace backend\modules\seo\models;

use common\models\WbpActiveRecord;
use wbp\images\models\PlaceHolder;
use Yii;


/**
 * Class SEO
 * @package backend\modules\seo\models
 */
class SEO extends WbpActiveRecord
{
    /**
     * @var
     */
    public $weeks_adm;
    /**
     * @var array
     */
    public static $imageTypes = ['og:image'];

    /**
     * @return string
     */
    public static function tableName()
    {
        return '{{%seo}}'; // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'title' => Yii::t('admin', 'title'),
            'description' => Yii::t('admin', 'description'),
            'keywords' => Yii::t('admin', 'keywords'),
            'status' => Yii::t('admin', 'status'),
        ];
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['title', 'description', 'keywords', 'status', 'og_title', 'og_description', 'og_url', 'og_type', 'sort'], 'safe', 'on' => [self::ADMIN_ADD_SCENARIO, self::ADMIN_EDIT_SCENARIO]],
        ];
    }

    /**
     * @param $key
     * @param bool $create
     * @return $this|array|SEO|null|\yii\db\ActiveRecord
     */
    public static function findByKey($key, $create = true)
    {
        $seoModel = self::find()->where(['key' => $key]);
        if (!$create) $seoModel = $seoModel->andWhere(['status' => 1]);
        $seoModel = $seoModel->one();
        if (!$seoModel && $create) {
            $seoModel = new self();
            $seoModel->key = $key;
            $seoModel->save();
        }
        return $seoModel;
    }

    /**
     * @param $key
     */
    public static function setByKey($key)
    {
        $model = self::findByKey($key);
        $default = self::findByKey('default');
        if ($model) {
            self::setMeta($model, $default);
        }
    }

    /**
     * @param $model
     * @return bool
     */
    public static function setByModel($model)
    {
        $className = $model->className();
        $key = $className::$seoKey;
        if (!$key) return false;
        $key = $key . '-' . $model->id;
        self::setByKey($key);
    }


    /**
     * @param $seo
     * @param $default
     */
    public static function setMeta($seo, $default)
    {
        if ($seo->description) self::setDescription($seo->description);
        elseif ($default) self::setDescription($default->description);

        if ($seo->keywords) self::setKeywords($seo->keywords);
        elseif ($default) self::setKeywords($default->keywords);

        if ($seo->title) self::setTitle($seo->title);
        elseif ($default) self::setTitle($default->title);

        //added og {title, description, type, url}
        if ($seo->og_title) self::setOgTitle($seo->og_title);
        elseif ($default) self::setOgTitle($default->og_title);

        if ($seo->og_description) self::setOgDescription($seo->og_description);
        elseif ($default) self::setOgDescription($default->og_description);

        if ($seo->og_type) self::setOgType($seo->og_type);
        elseif ($default) self::setOgType($default->og_type);

        if ($seo->og_url) self::setOgUrl($seo->og_url);
        elseif ($default) self::setOgUrl($default->og_url);


        // image isset and it is'nt "noimage"

        if(isset($seo->image) && !($seo->image instanceof PlaceHolder)){
            self::setOgImage($seo->image->getAbsoluteSourceUrl());
        }elseif(isset($default->image) && !($default->image instanceof PlaceHolder)){
            self::setOgImage($default->image->getAbsoluteSourceUrl());
        }
    }


    /**
     * @param $ogTitle
     */
    public static function setOgTitle($ogTitle)
    {
        \Yii::$app->view->registerMetaTag([
            'property' => 'og:title',
            'content' => self::prepareContent($ogTitle),
        ]);
    }

    /**
     * @param $description
     */
    public static function setOgDescription($description)
    {
        \Yii::$app->view->registerMetaTag([
            'property' => 'og:description',
            'content' => self::prepareContent($description)
        ]);
    }

    /**
     * @param $type
     */
    public static function setOgType($type)
    {
        \Yii::$app->view->registerMetaTag([
            'property' => 'og:type',
            'content' => self::prepareContent($type)
        ]);
    }


    /**
     * @param $url
     */
    public static function setOgUrl($url)
    {
        \Yii::$app->view->registerMetaTag([
            'property' => 'og:url',
            'content' => self::prepareContent($url)
        ]);
    }


    /**
     * @param $image
     */
    public static function setOgImage($image)
    {
        \Yii::$app->view->registerMetaTag([
            'property' => 'og:image',
            'content' => self::prepareContent($image),
        ]);
    }



    /**
     * @param $keywords
     */
    public static function setKeywords($keywords)
    {
        \Yii::$app->view->registerMetaTag([
            'name' => 'keywords',
            'content' => self::prepareContent($keywords)
        ]);
    }


    /**
     * @param $description
     */
    public static function setDescription($description)
    {
        \Yii::$app->view->registerMetaTag([
            'name' => 'description',
            'content' => self::prepareContent($description)
        ]);
    }

    /**
     * @param $title
     */
    public static function setTitle($title)
    {
        \Yii::$app->view->title = self::prepareContent($title);
    }

    /**
     * @param $content
     * @return mixed
     */
    public static function prepareContent($content)
    {
        return str_replace([
            "\n"
        ], '', strip_tags($content));
    }

}