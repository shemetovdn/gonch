<?

namespace backend\modules\subscribe\models;

use common\models\Config;
use common\models\WbpActiveRecord;

class Subscribe extends WbpActiveRecord
{
    public $return;

    const FRONTEND_SUBSCRIBE = 'frontend-subscribe';
    const FRONTEND_SIGNUP = 'frontend-signup';
    const FRONTEND_LOGIN = 'frontend-login';

    public static function tableName()
    {
        return '{{%subscribers}}';
    }

    public function rules()
    {
        return [
            [['email','return'], 'safe'],
            [['email' ], 'required', 'message' => 'Это обязательное поле'],

        ];
    }

    public function getAnswers()
    {
        return $this->hasMany(SubscribeAnswers::className(), ['contact_id', 'id']);
    }

    public static function SubscribeUser($email){
        $subscriber = Subscribe::find()->where(['email' => $email])->one();
        if(empty($subscriber)){
            $subscriber = new Subscribe();
            $subscriber->email = $email;
            $subscriber->save();
        }
    }
    public static function UnsubscribeUser($email){
        $subscriber = Subscribe::find()->where(['email' => $email])->one();
        if(!empty($subscriber)){
            $subscriber->delete();
        }
    }

    public function beforeSave($insert)
    {
        $this->hash = md5($this->email);
        
        \Yii::$app->mailer->compose(['text'])
            ->setFrom([Config::getParameter('email') => Config::getParameter('title')])
            ->setTo([Config::getParameter('email') => Config::getParameter('title')])
            ->setSubject('Новый подписчик ' . $this->email)
            ->setCharset('UTF-8')
            ->setHtmlBody("")
            ->send();
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


}